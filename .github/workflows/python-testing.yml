# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
        ls -lah scripts
    - name: Lint with flake8
      run: |
       poetry run bash ./scripts/linting_formatting.sh
    - name: Test with pytest
      run: |
       poetry run bash ./scripts/backend_tests.sh

    - name: Publish test results
      if: always()
      uses: pmeier/pytest-results-action@main
      with:
        # A list of JUnit XML files, directories containing the former, and wildcard
        # patterns to process.
        # See @actions/glob for supported patterns.
        path: scripts/test-results.xml

        # (Optional) Add a summary of the results at the top of the report
        summary: true

        # (Optional) Select which results should be included in the report.
        # Follows the same syntax as `pytest -r`
        display-options: fEX

        # (Optional) Fail the workflow if no JUnit XML was found.
        fail-on-empty: true

        # (Optional) Title of the test results section in the workflow summary
        title: Pytest results
